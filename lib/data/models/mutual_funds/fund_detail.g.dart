// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'fund_detail.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

FundDetail _$FundDetailFromJson(Map<String, dynamic> json) => FundDetail(
      amcCode: json['amc_code'] as String,
      amcName: json['amc_name'] as String,
      schemeCode: json['scheme_code'] as String,
      schemeName: json['scheme_name'] as String,
      schemeNameUnique: json['scheme_name_unique'] as String,
      isin: json['isin'] as String,
      assetCategory: json['asset_category'] as String,
      assetSubCategory: json['asset_sub_category'] as String,
      planName: json['plan_name'] as String,
      optionName: json['option_name'] as String,
      expenseRatio: (json['expense_ratio'] as num).toDouble(),
      riskRating: (json['risk_rating'] as num).toDouble(),
      rtaName: json['rta_name'] as String,
      schemeCodeBse: json['scheme_code_bse'] as String,
      amcCodeBse: json['amc_code_bse'] as String,
      vrRating: json['vr_rating'] as String,
      amcSchemeCodeBse: json['amc_scheme_code_bse'] as String,
      rtaSchemeCodeBse: json['rta_scheme_code_bse'] as String,
      schemeDescription: json['scheme_description'] as String,
      schemeDescriptionBse: json['scheme_description_bse'] as String,
      investmentOption: json['investment_option'] as String,
      nature: json['nature'] as String,
      active: json['active'] as String,
      purchaseAllowed: json['purchase_allowed'] as String,
      purchaseTransactionMode: json['purchase_transaction_mode'] as String,
      minInitialInvestment: (json['min_initial_investment'] as num).toDouble(),
      initialInvestmentMultiples:
          (json['initial_investment_multiples'] as num).toDouble(),
      minAdditionalInvestment:
          (json['min_additional_investment'] as num).toDouble(),
      additionalInvestmentMultiples:
          (json['additional_investment_multiples'] as num).toDouble(),
      minWithdrawalAmount: (json['min_withdrawal_amount'] as num).toDouble(),
      sipAllowed: json['sip_allowed'] as String,
      sipFrequency: (json['sip_frequency'] as num).toDouble(),
      sipDate: json['sip_date'] as String,
      minSipAmount: (json['min_sip_amount'] as num).toDouble(),
      minSipInstallments: json['min_sip_installments'] as int,
      maxSipInstallments: json['max_sip_installments'] as int,
      sipMultiples: (json['sip_multiples'] as num).toDouble(),
      minSipGap: json['min_sip_gap'] as int,
      maxSipGap: json['max_sip_gap'] as int,
      sipInstallmentGap: json['sip_installment_gap'] as int,
      sipStatus: json['sip_status'] as int,
      switchAllowed: json['switch_allowed'] as String,
      switchMinAmt: (json['switch_min_amt'] as num).toDouble(),
      switchMultiples: (json['switch_multiples'] as num).toDouble(),
      switchAdditionalAmt: (json['switch_additional_amt'] as num).toDouble(),
      stpAllowed: json['stp_allowed'] as String,
      stpFrequency: (json['stp_frequency'] as num).toDouble(),
      stpDates: json['stp_dates'] as String,
      stpMinAmount: (json['stp_min_amount'] as num).toDouble(),
      swpAllowed: json['swp_allowed'] as String,
      swpMinAmount: (json['swp_min_amount'] as num).toDouble(),
      lockInPeriod: json['lock_in_period'] as int,
      riskProfile: json['risk_profile'] as String?,
      exitLoadPeriodRemark: json['exit_load_period_remark'] as String,
      exitLoadRate: (json['exit_load_rate'] as num).toDouble(),
      fundSize: (json['fund_size'] as num).toDouble(),
      performance:
          Performance.fromJson(json['performance'] as Map<String, dynamic>),
      imgUrl: json['img_url'] as String,
      benchmark: json['benchmark'] as String,
      nav: (json['nav'] as num).toDouble(),
      navDate: DateTime.parse(json['nav_date'] as String),
      fundManager: json['fund_manager'] as String?,
      isinDividendPayoutOrGrowth:
          json['isin_dividend_payout_or_growth'] as String,
      isinDividendReinvest: json['isin_dividend_reinvest'] as String,
      bseTxn: json['bse_txn'] as String,
      bseCodePayoutOrGrowth: json['bse_code_payout_or_growth'] as String,
      bseCodeReinvest: json['bse_code_reinvest'] as String,
      objective: json['objective'] as String,
      schemeDocUrlString: json['scheme_doc_url_string'] as String?,
      riskometer: json['riskometer'] as String,
      exitLoad: ExitLoad.fromJson(json['exit_load'] as Map<String, dynamic>),
      txnInfo: TxnInfo.fromJson(json['txn_info'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$FundDetailToJson(FundDetail instance) =>
    <String, dynamic>{
      'amc_code': instance.amcCode,
      'amc_name': instance.amcName,
      'scheme_code': instance.schemeCode,
      'scheme_name': instance.schemeName,
      'scheme_name_unique': instance.schemeNameUnique,
      'isin': instance.isin,
      'asset_category': instance.assetCategory,
      'asset_sub_category': instance.assetSubCategory,
      'plan_name': instance.planName,
      'option_name': instance.optionName,
      'expense_ratio': instance.expenseRatio,
      'risk_rating': instance.riskRating,
      'rta_name': instance.rtaName,
      'scheme_code_bse': instance.schemeCodeBse,
      'amc_code_bse': instance.amcCodeBse,
      'vr_rating': instance.vrRating,
      'amc_scheme_code_bse': instance.amcSchemeCodeBse,
      'rta_scheme_code_bse': instance.rtaSchemeCodeBse,
      'scheme_description': instance.schemeDescription,
      'scheme_description_bse': instance.schemeDescriptionBse,
      'investment_option': instance.investmentOption,
      'nature': instance.nature,
      'active': instance.active,
      'purchase_allowed': instance.purchaseAllowed,
      'purchase_transaction_mode': instance.purchaseTransactionMode,
      'min_initial_investment': instance.minInitialInvestment,
      'initial_investment_multiples': instance.initialInvestmentMultiples,
      'min_additional_investment': instance.minAdditionalInvestment,
      'additional_investment_multiples': instance.additionalInvestmentMultiples,
      'min_withdrawal_amount': instance.minWithdrawalAmount,
      'sip_allowed': instance.sipAllowed,
      'sip_frequency': instance.sipFrequency,
      'sip_date': instance.sipDate,
      'min_sip_amount': instance.minSipAmount,
      'min_sip_installments': instance.minSipInstallments,
      'max_sip_installments': instance.maxSipInstallments,
      'sip_multiples': instance.sipMultiples,
      'min_sip_gap': instance.minSipGap,
      'max_sip_gap': instance.maxSipGap,
      'sip_installment_gap': instance.sipInstallmentGap,
      'sip_status': instance.sipStatus,
      'switch_allowed': instance.switchAllowed,
      'switch_min_amt': instance.switchMinAmt,
      'switch_multiples': instance.switchMultiples,
      'switch_additional_amt': instance.switchAdditionalAmt,
      'stp_allowed': instance.stpAllowed,
      'stp_frequency': instance.stpFrequency,
      'stp_dates': instance.stpDates,
      'stp_min_amount': instance.stpMinAmount,
      'swp_allowed': instance.swpAllowed,
      'swp_min_amount': instance.swpMinAmount,
      'lock_in_period': instance.lockInPeriod,
      'risk_profile': instance.riskProfile,
      'exit_load_period_remark': instance.exitLoadPeriodRemark,
      'exit_load_rate': instance.exitLoadRate,
      'fund_size': instance.fundSize,
      'performance': instance.performance,
      'img_url': instance.imgUrl,
      'benchmark': instance.benchmark,
      'nav': instance.nav,
      'nav_date': instance.navDate.toIso8601String(),
      'fund_manager': instance.fundManager,
      'isin_dividend_payout_or_growth': instance.isinDividendPayoutOrGrowth,
      'isin_dividend_reinvest': instance.isinDividendReinvest,
      'bse_txn': instance.bseTxn,
      'bse_code_payout_or_growth': instance.bseCodePayoutOrGrowth,
      'bse_code_reinvest': instance.bseCodeReinvest,
      'objective': instance.objective,
      'scheme_doc_url_string': instance.schemeDocUrlString,
      'riskometer': instance.riskometer,
      'exit_load': instance.exitLoad,
      'txn_info': instance.txnInfo,
    };

ExitLoad _$ExitLoadFromJson(Map<String, dynamic> json) => ExitLoad(
      exitLoadPeriod: (json['exit_load_period'] as num).toDouble(),
      exitLoadRate: (json['exit_load_rate'] as num).toDouble(),
      exitLoadPeriodRemark: json['exit_load_period_remark'] as String,
    );

Map<String, dynamic> _$ExitLoadToJson(ExitLoad instance) => <String, dynamic>{
      'exit_load_period': instance.exitLoadPeriod,
      'exit_load_rate': instance.exitLoadRate,
      'exit_load_period_remark': instance.exitLoadPeriodRemark,
    };

TxnInfo _$TxnInfoFromJson(Map<String, dynamic> json) => TxnInfo(
      minInvest: (json['min_invest'] as num).toDouble(),
      minInvestSip: (json['min_invest_sip'] as num).toDouble(),
      minInvestX: (json['min_invest_x'] as num).toDouble(),
      minInvestSipX: (json['min_invest_sip_x'] as num).toDouble(),
    );

Map<String, dynamic> _$TxnInfoToJson(TxnInfo instance) => <String, dynamic>{
      'min_invest': instance.minInvest,
      'min_invest_sip': instance.minInvestSip,
      'min_invest_x': instance.minInvestX,
      'min_invest_sip_x': instance.minInvestSipX,
    };
